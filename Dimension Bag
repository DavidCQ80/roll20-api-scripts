on('ready', () => {
    const BAG_MAX_WEIGHT = 500;
    const SACK_MAX_WEIGHT = 900;
    const HOLE_MAX_WEIGHT = Infinity;
    const COIN_ORDER = ['PP', 'GP', 'EP', 'SP', 'CP'];
    const QUANTITY_COLOR = 'blue';

    const getOrCreateHandout = (handoutName) => {
        let handout = findObjs({ type: 'handout', name: handoutName })[0];
        if (!handout) {
            log(`Creating handout: ${handoutName}`);
            handout = createObj('handout', { 
                name: handoutName, 
                inplayerjournals: 'all',
                notes: '<b>Total Weight: 0 lbs</b><br><br>'
            });
        } else {
            log(`Found existing handout: ${handoutName}`);
        }
        return handout;
    };

    const parseHandoutContent = (notes) => {
        let items = {};
        (notes || '').split('<br>').forEach(line => {
            let match = line.match(/<b>(.+?)<\/b>: <span style='color:(.*?)'>(\d+)<\/span> \((.*?) lbs\)/);
            if (match) {
                let [, item, , quantity, weight] = match;
                items[item] = { quantity: parseInt(quantity, 10), weight: parseFloat(weight) };
            }
        });
        return items;
    };

    const updateHandout = (handoutName, items) => {
        let totalWeight = Object.entries(items).reduce((sum, [_, { quantity, weight }]) => sum + (quantity * weight), 0);
        let sortedItems = Object.entries(items).sort(([a], [b]) => {
            let aIndex = COIN_ORDER.indexOf(a);
            let bIndex = COIN_ORDER.indexOf(b);
            if (aIndex !== -1 && bIndex !== -1) return aIndex - bIndex;
            if (aIndex !== -1) return -1;
            if (bIndex !== -1) return 1;
            return a.localeCompare(b);
        });

        let content = `<b>Total Weight: ${totalWeight.toFixed(2)} lbs</b><br><br>`;
        sortedItems.forEach(([item, { quantity, weight }]) => {
            content += `<b>${item}</b>: <span style='color:${QUANTITY_COLOR}'>${quantity}</span> (${weight} lbs)<br>`;
        });

        let handout = getOrCreateHandout(handoutName);
        handout.set('notes', content);
        log(`Handout updated for ${handoutName}`);
    };

    const addItem = (count, item, weight, handoutName, maxWeight) => {
        let handout = getOrCreateHandout(handoutName);
        handout.get('notes', (notes) => {
            let items = parseHandoutContent(notes);
            count = parseInt(count, 10);
            weight = parseFloat(weight);
            let currentWeight = Object.entries(items).reduce((sum, [_, { quantity, weight }]) => sum + (quantity * weight), 0);
            if (currentWeight + (count * weight) > maxWeight) {
                sendChat(handoutName, `&{template:default} {{name=${handoutName}}} {{Warning=The ${handoutName} is overloaded and its contents are lost.}}`);
                return;
            }
            items[item] = items[item] || { quantity: 0, weight };
            items[item].quantity += count;
            updateHandout(handoutName, items);
        });
    };

    const removeItem = (count, item, handoutName) => {
        let handout = getOrCreateHandout(handoutName);
        handout.get('notes', (notes) => {
            let items = parseHandoutContent(notes);
            count = parseInt(count, 10);
            if (!items[item] || items[item].quantity < count) {
                sendChat(handoutName, `/w gm &{template:default} {{name=${handoutName}}} {{Warning=Not enough ${item} to remove!}}`);
                return;
            }
            items[item].quantity -= count;
            if (items[item].quantity <= 0) delete items[item];
            updateHandout(handoutName, items);
        });
    };

    on('chat:message', (msg) => {
        if (msg.type !== 'api') return;

        let args = msg.content.match(/^!(dimensionbag|sack|hole) (add|remove) "(.+?)" (.+)$/);

        if (!args) {
            sendChat('Storage', '/w gm &{template:default} {{name=Storage}} {{Warning=Invalid command syntax. Use: !dimensionbag add "Bag Name" [quantity] [item] [weight], !sack add ..., or !hole add ...}}');
            return;
        }

        let type = args[1]; 
        let action = args[2];
        let storageName = args[3];
        let commandArgs = args[4].split(' ');
        let maxWeight = type === 'dimensionbag' ? BAG_MAX_WEIGHT : type === 'sack' ? SACK_MAX_WEIGHT : HOLE_MAX_WEIGHT;

        if (action === 'add' && commandArgs.length >= 3) {
            let count = commandArgs.shift();
            let weight = commandArgs.pop();
            let item = commandArgs.join(' ');
            addItem(count, item, weight, storageName, maxWeight);
        } else if (action === 'remove' && commandArgs.length >= 2) {
            let count = commandArgs.shift();
            let item = commandArgs.join(' ');
            removeItem(count, item, storageName);
        } else {
            sendChat('Storage', '/w gm &{template:default} {{name=Storage}} {{Warning=Invalid command syntax.}}');
        }
    });
});
